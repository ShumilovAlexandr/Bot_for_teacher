import bot

from aiogram import executor
from aiogram.types import (InlineKeyboardMarkup,
                           InlineKeyboardButton,
                           CallbackQuery,
                           Message)
from aiogram.dispatcher import FSMContext


from bot.loader import dp
from bot.handlers.add_user import check_date
from bot.handlers.cancel_lesson import select_lesson



@dp.message_handler(commands=['start'])
async def start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ—Ç–∞.

    –ó–¥–µ—Å—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–±–æ—Ä 3 –¥–µ–π—Å—Ç–≤–∏—è (3 –∫–Ω–æ–ø–∫–∏):
    –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫, –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∏—Ç–µ–ª–µ–º.
    send_message - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    reply_markup - "–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç" –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    button1 = InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫ –∫ —É—á–∏—Ç–µ–ª—é üá¨üáß",
                                   callback_data='button1')
    button2 = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫ ‚ùå",
                                   callback_data='button2')
    button3 = InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º üíª",
                                   callback_data='button3')
    markup = InlineKeyboardMarkup(row_width=1).add(button1, button2, button3)
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –¢–≤–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —É–∂–µ "
                         "–Ω–∞—á–∞–ª–æ—Å—å! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Ç–µ–±—è –¥–µ–π—Å—Ç–≤–∏–µ.",
                         reply_markup=markup)


@dp.callback_query_handler(lambda callback: True)
async def check_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –∫–Ω–æ–ø–∫–∏."""
    match callback.data:
        case "button1":
            await check_date(callback.message, state=state)
        case "button2":
            await select_lesson(callback.message, state=state)
        case "button3":
            pass





if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

