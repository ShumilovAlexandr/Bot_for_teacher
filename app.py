import datetime
import os
import json

from aiogram import (Bot,
                     Dispatcher,
                     executor)
from aiogram.types import (InlineKeyboardMarkup,
                           InlineKeyboardButton,
                           CallbackQuery,
                           Message)
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from sqlalchemy import insert
from dotenv import load_dotenv

from database.databases import Session
from utils.validators import (check_time_range,
                              check_time_format,
                              check_date_format,
                              check_date_range)
from database.tables import Timesheet
from database.database_query import check_records
from utils.states import (LessonData,
                           CancelLesson)


load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = Bot(os.getenv("TOKEN"))
# –û–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot, storage=MemoryStorage())

session = Session()


@dp.message_handler(commands=['start'])
async def start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ—Ç–∞.

    –ó–¥–µ—Å—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–±–æ—Ä 3 –¥–µ–π—Å—Ç–≤–∏—è (3 –∫–Ω–æ–ø–∫–∏):
    –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫, –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∏—Ç–µ–ª–µ–º.
    send_message - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    reply_markup - "–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç" –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    button1 = InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫ –∫ —É—á–∏—Ç–µ–ª—é üá¨üáß",
                                   callback_data='button1')
    button2 = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫ ‚ùå",
                                   callback_data='button2')
    button3 = InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º üíª",
                                   callback_data='button3')
    markup = InlineKeyboardMarkup(row_width=1).add(button1, button2, button3)
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –¢–≤–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —É–∂–µ "
                         "–Ω–∞—á–∞–ª–æ—Å—å! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Ç–µ–±—è –¥–µ–π—Å—Ç–≤–∏–µ.",
                         reply_markup=markup)


@dp.callback_query_handler(lambda callback: True)
async def check_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –∫–Ω–æ–ø–∫–∏."""
    match callback.data:
        case "button1":
            await check_date(callback.message, state=state)
        case "button2":
            await select_lesson(callback.message, state=state)
        case "button3":
            pass

### –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–∫–∞. ###
@dp.message_handler(text =["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫ –∫ —É—á–∏—Ç–µ–ª—é üá¨üáß"])
async def check_date(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —É—Ä–æ–∫–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è
    –≤—Ä–µ–º–µ–Ω–∏).
    """
    await state.set_state(LessonData.date)
    await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É "
                                            "–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —É—Ä–æ–∫–∞ –≤ "
                                            "—Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å "
                                            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020-02-22) "
                                            "\U0001F4C5")

@dp.message_handler(state=LessonData.date)
async def check_time(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —É—Ä–æ–∫–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è
    –¥–∞—Ç—ã).
    """
    await state.update_data(date=message.text)
    date_str = (await state.get_data())['date']
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if not check_date_format(date_str):
        await bot.send_message(message.chat.id, "\U00002757 –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç "
                                                "–¥–∞—Ç—ã. –î–∞—Ç–∞ —É—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å—Å—è "
                                                "–≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å ("
                                                "—Ü–∏—Ñ—Ä–∞–º–∏) \U00002757")
        return
    # ... –∏ –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    if not check_date_range(date_str):
        await bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞, –∏–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ "
                                                "–æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ "
                                                "\U0001F60C")
        return
    # ... –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ
    if date_str <= str(datetime.datetime.now()):
        await bot.send_message(message.chat.id, "–î–∞—Ç—É —É—Ä–æ–∫–∞ –∏ –≤—Ä–µ–º—è –Ω–∞–¥–æ "
                                                "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å "
                                                "–∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ó–∞–¥–Ω–∏–º "
                                                "–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —á–∏—Å–ª–æ–º —ç—Ç–æ "
                                                "—Å–¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è "
                                                "\U0000263A")
        return
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ...
    await state.set_state(LessonData.time)
    await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç "
                                            "–ø—Ä–æ–≤–µ–¥–µ–Ω –í–∞—à —É—Ä–æ–∫ –ø–æ –ú–°–ö "
                                            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00) \U000023F0")

@dp.message_handler(state=LessonData.time)
async def check_name(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞."""
    await state.update_data(time=message.text)
    date_str = (await state.get_data())['date']
    time_str = (await state.get_data())['time']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–µ
    if not check_time_format(time_str):
        await bot.send_message(message.chat.id, "\U00002757 –ù–µ–≤–µ—Ä–Ω—ã–π "
                                                "—Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ "
                                                "–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                                                "'—á—á:–º–º' \U00002757")
        return

    # ... –∏ –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    if not check_time_range(time_str):
        await bot.send_message(message.chat.id, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ "
                                                "–º–µ–∂–¥—É 10:00 –∏ 20:00 —Å —à–∞–≥–æ–º –≤ 1 —á–∞—Å. "
                                                "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é —Ç–æ–∂–µ –Ω—É–∂–µ–Ω "
                                                "–æ—Ç–¥—ã—Ö \U0001F60C")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–Ω—è—Ç—ã
    if check_records(date_str, time_str):
        await bot.send_message(message.chat.id,
                               f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—Ä–µ–º—è {time_str} "
                               f"\U000023F0 –Ω–∞ {date_str} \U0001F4C5 "
                               f"—É–∂–µ –∑–∞–Ω—è—Ç–æ. "
                               f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
        return

    # –ï—Å–ª–∏ –≤–≤–æ–¥–∏–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –∏ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω, –∑–∞–¥–∞–µ–º
    # –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    await state.set_state(LessonData.name)
    await bot.send_message(message.chat.id, "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - –∫–∞–∫ –∫ –í–∞–º "
                                            "–º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, "
                                            "–µ—Å–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é "
                                            "\U0001F609")

@dp.message_handler(state=LessonData.name)
async def show_result(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—á–µ–Ω–∏–∫–∞ –≤ –±–∞–∑—É
    –¥–∞–Ω–Ω—ã—Ö.
    """
    await state.update_data(name=message.text)
    date = (await state.get_data())['date']
    time = (await state.get_data())['time']
    name = (await state.get_data())['name']

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–∞—é—â–µ–µ –±—Ä–æ–Ω—å.
    await bot.send_message(message.chat.id,
                           f"–ò—Ç–∞–∫, {name}, –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å "
                           f"{date} –Ω–∞ {time} –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ "
                           f"—É—Ä–æ–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –£—á–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å "
                           f"–í–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ –¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞. –£—Å–ø–µ—Ö–æ–≤ –í–∞–º! "
                           f"üá¨üáß üá¨üáß üá¨üáß")
    # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    data = {
        'record_date': date,
        'record_time': time,
        'fio': name,
        'user_id': message.from_user.id
    }
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞ –≤ –ë–î.
    stmt = insert(Timesheet).values(data)
    session.execute(stmt)
    session.commit()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    await state.reset_state()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤—ã–±–æ—Ä –∫–Ω–æ–ø–æ–∫.
    await start(message)

### –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞. ###
@dp.message_handler(text=["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫ ‚ùå"])
async def select_lesson(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –≤—ã–≤–æ–¥ –¥–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç–æ—è—â–∏–π
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª —Å–µ–±–µ —É—Ä–æ–∫–∏.
    """
    lesson = session\
        .query(Timesheet.record_date)\
        .filter(Timesheet.user_id == message.chat.id)\
        .all()

    # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥–∏–º—É—é –∏–∑ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    formatted_dates = [date[0].strftime('%Y-%m-%d') for date in lesson]
    markup = InlineKeyboardMarkup(row_width=1)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏.
    for less in formatted_dates:
        buttons = InlineKeyboardButton(text=str(less),
                                       callback_data = f'{less}')
        markup.add(buttons)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    await state.set_state(CancelLesson.date_lsn)
    await bot.send_message(message.chat.id, "–ñ–∞–ª—å –∫–æ–Ω–µ—á–Ω–æ \U0001F61E. "
                                            "–ù–∞–¥–µ—é—Å—å, –í—ã –ø—Ä–æ—Å—Ç–æ —Ä–µ—à–∏–ª–∏ "
                                            "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–π –¥–µ–Ω—å "
                                            "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫ "
                                            "\U0001F4C5", reply_markup=markup)

@dp.callback_query_handler(lambda callback: True, state=CancelLesson.date_lsn)
async def select_time(callback: CallbackQuery, state: \
    FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –≤—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ –∫ –¥–∞—Ç–µ, –≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç–æ—è—â–∏–π
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª —Å–µ–±–µ —É—Ä–æ–∫–∏.
    """
    await state.update_data(date_lsn=callback.data)
    time_lesson = session \
        .query(Timesheet.record_time) \
        .filter(Timesheet.record_date == callback.data) \
        .all()
    markup = InlineKeyboardMarkup(row_width=1)

    formatted_times = [time[0].strftime("%H:%M") for time in time_lesson]
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.
    for time in formatted_times:
        buttons = InlineKeyboardButton(text=str(time),
                                       callback_data=f'{time}')
        markup.add(buttons)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    await state.set_state(CancelLesson.time_lsn)
    await callback.message.answer(text="–¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, "
                                       "–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —É –í–∞—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω "
                                       f"—É—Ä–æ–∫",
                                  reply_markup=markup)




@dp.callback_query_handler(lambda callback: True, state=CancelLesson.time_lsn)
async def select_time(callback: CallbackQuery, state: \
                      FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    await state.update_data(time_lsn=callback.data)
    data = await  state.get_data()
    date = data['date_lsn']
    time = data['time_lsn']
    await callback.message.answer(text=f"–ó–∞–ø–∏—Å—å {date} –Ω–∞ {time} –æ—Ç–º–µ–Ω–µ–Ω–∞. "
                                       f"–ë—É–¥–µ–º —Ä–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å —É –º–µ–Ω—è –Ω–∞ "
                                       f"–∑–∞–Ω—è—Ç–∏–∏! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—åüòçüòçüòç")
    stmt = session\
        .query(Timesheet) \
        .filter(Timesheet.record_date == date)\
        .filter(Timesheet.record_time == time)\
        .delete()
    session.commit()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞.
    await state.reset_state()


# TODO –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞, —Å–Ω–æ–≤–∞ –≤—ã–≤–æ–¥–∏—Ç—å
#  —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫.
# TODO –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤,
#  –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–º–µ–Ω—ã - –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –í–∞–º–∏ –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–µ –æ–¥–∏–Ω
#  —É—Ä–æ–∫.
# TODO —Ç–∞–∫–∂–µ, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø–æ—á–µ–º—É –¥–æ–ª–≥–æ —Å–≤–µ—Ç—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏.
# TODO –∏ –µ—â–µ, –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥.


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

