import datetime
import os

from aiogram import (Bot,
                     Dispatcher,
                     executor)
from aiogram.types import (InlineKeyboardMarkup,
                           InlineKeyboardButton,
                           CallbackQuery,
                           Message)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import (State,
                                              StatesGroup)
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from dotenv import load_dotenv

from database.config import insert_into_table


load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = Bot(os.getenv("TOKEN"))
# –û–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot, storage=MemoryStorage())


# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
class LessonData(StatesGroup):
    date = State()
    time = State()
    name = State()


@dp.message_handler(commands=['start'])
async def start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ—Ç–∞.

    –ó–¥–µ—Å—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–±–æ—Ä 3 –¥–µ–π—Å—Ç–≤–∏—è (3 –∫–Ω–æ–ø–∫–∏):
    –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫, –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∏—Ç–µ–ª–µ–º.
    send_message - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    reply_markup - "–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç" –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    button1 = InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫ –∫ —É—á–∏—Ç–µ–ª—é üá¨üáß",
                                   callback_data='button1')
    button2 = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫ ‚ùå",
                                   callback_data='button2')
    button3 = InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º üíª",
                                   callback_data='button3')
    markup = InlineKeyboardMarkup(row_width=1).add(button1, button2, button3)
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –¢–≤–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —É–∂–µ "
                         "–Ω–∞—á–∞–ª–æ—Å—å! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Ç–µ–±—è –¥–µ–π—Å—Ç–≤–∏–µ.",
                         reply_markup=markup)


@dp.callback_query_handler(lambda callback: True)
async def check_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –∫–Ω–æ–ø–∫–∏."""
    match callback.data:
        case "button1":
            await check_date(callback.message, state=state)
        case "button2":
            pass
        case "button3":
            pass


# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–∫–∞.
@dp.message_handler(text =["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫ –∫ —É—á–∏—Ç–µ–ª—é üá¨üáß"])
async def check_date(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —É—Ä–æ–∫–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è
    –≤—Ä–µ–º–µ–Ω–∏).
    """
    await state.set_state(LessonData.date)
    await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É "
                                            "–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —É—Ä–æ–∫–∞ –≤ "
                                            "—Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å "
                                            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020-02-22): ")

@dp.message_handler(state=LessonData.date)
async def check_time(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —É—Ä–æ–∫–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è
    –¥–∞—Ç—ã).
    """
    await state.update_data(date=message.text)
    await state.set_state(LessonData.time)
    await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç "
                                            "–ø—Ä–æ–≤–µ–¥–µ–Ω –í–∞—à —É—Ä–æ–∫ –ø–æ –ú–°–ö "
                                            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00)")

@dp.message_handler(state=LessonData.time)
async def check_name(message: Message, state: FSMContext):
    await state.update_data(time=message.text)
    await state.set_state(LessonData.name)
    await bot.send_message(message.chat.id, "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - –∫–∞–∫ –∫ –í–∞–º "
                                            "–º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, "
                                            "–µ—Å–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é "
                                            "\U0001F609")

@dp.message_handler(state=LessonData.name)
async def show_result(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    date = (await state.get_data())['date']
    time = (await state.get_data())['time']
    name = (await state.get_data())['name']
    await bot.send_message(message.chat.id, f"–ò—Ç–∞–∫, {name}, –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å "
                                            f"{date} –Ω–∞ {time} –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ "
                                            f"—É—Ä–æ–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –£—á–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å "
                                            f"–í–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ –¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞. –£—Å–ø–µ—Ö–æ–≤ –í–∞–º! üá¨üáß üá¨üáß üá¨üáß")
    insert_into_table(date, time, name, message.from_user.id)



# TODO –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

