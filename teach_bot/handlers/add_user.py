import datetime
import json

from aiogram.dispatcher import FSMContext
from aiogram.types import (Message,
                           InlineKeyboardButton,
                           InlineKeyboardMarkup,
                           CallbackQuery)
from aiogram_calendar import (SimpleCalendar,
                              simple_cal_callback)
from sqlalchemy import (insert,
                        select)

from teach_bot.utils.states import LessonData
from ..loader import (dp,
                      bot)
from ..database.database_query import check_records
from ..database.databases import session
from ..database.tables import (Timesheet,
                               Timelist)


@dp.message_handler(text =["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫ –∫ —É—á–∏—Ç–µ–ª—é üá¨üáß"])
async def show_start_message(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É "
                              "–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —É—Ä–æ–∫–∞ –≤ "
                              "\U0001F4C5",
                         reply_markup=await SimpleCalendar().start_calendar())
    await state.set_state(LessonData.date_lesson)


@dp.callback_query_handler(simple_cal_callback.filter(),
                           state=LessonData.date_lesson)
async def select_date(callback_query: CallbackQuery,
                      callback_data: dict,
                      state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–æ–π –≤—ã–±–æ—Ä –≤ –º–∞—à–∏–Ω–µ
    —Å–æ—Å—Ç–æ—è–Ω–∏—è. –¢–∞–∫–∂–µ, —Ç—É—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–±–æ—Ä –≤—Ä–µ–º—è —É—Ä–æ–∫–∞.
    """
    selected, date = await SimpleCalendar().process_selection(
        callback_query, callback_data)
    if selected:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        # (–≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º).
        da = callback_data["year"]+'-'+callback_data["month"]+'-'+callback_data["day"]
        res = datetime.datetime.strptime(da, '%Y-%m-%d')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
        if str(res) <= str(datetime.datetime.now()):

            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ "–∑–∞–¥–Ω–∏–º" —á–∏—Å–ª–æ–º –∏–ª–∏ —Ç–µ–∫—É—â–∞—è, –ø–æ—Å—ã–ª–∞–µ–º –≤ —á–∞—Ç
            # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º —Å–Ω–æ–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
            await bot.send_message(callback_query.message.chat.id,
                                   "–î–∞—Ç—É —É—Ä–æ–∫–∞ –∏ –≤—Ä–µ–º—è –Ω–∞–¥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. "
                                   "–ó–∞–¥–Ω–∏–º –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —á–∏—Å–ª–æ–º —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å "
                                   "–Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è \U0000263A",
                                   reply_markup=await SimpleCalendar().start_calendar())
            return
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.
            available_times = check_records(res.date())
            if not available_times:
                await bot.send_message(text="–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç "
                                              "—Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é "
                                              "–¥–∞—Ç—É.",
                                       chat_id=callback_query.message.chat.id,
                                       reply_markup=await SimpleCalendar().start_calendar())
                return
            # –í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ —Å —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º.
            markup = InlineKeyboardMarkup()
            for time_slot in available_times:
                button = InlineKeyboardButton(text=time_slot,
                                              callback_data=f"{time_slot}")
                markup.add(button)
            await callback_query.\
                message.\
                answer("–û–∫–µ–π, –≤—ã —Ä–µ—à–∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫ "
                       f"{date.strftime('%Y-%m-%d')}. –î–∞–≤–∞–π—Ç–µ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è "
                       "—Å–æ –≤—Ä–µ–º–µ–Ω–µ–º \U000023F0", reply_markup=markup)
            await state.update_data(date_lesson=res)
            await state.set_state(LessonData.time)


@dp.callback_query_handler(state=LessonData.time)
async def select_time(callback_query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —É—Ä–æ–∫–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è
    –¥–∞—Ç—ã).
    """
    date = (await state.get_data())['date_lesson']
    first_name = callback_query.from_user.first_name
    second_name = callback_query.from_user.last_name

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–∞—é—â–µ–µ –±—Ä–æ–Ω—å.
    await callback_query.message.answer(f"–ò—Ç–∞–∫, {first_name} {second_name}, –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å "
                           f"{date.date()} –≤ {callback_query.data} –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ "
                           "—É—Ä–æ–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –£—á–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ "
                           "–¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞. –£—Å–ø–µ—Ö–æ–≤ –í–∞–º! üá¨üáß üá¨üáß üá¨üáß")

    # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    data = {
        'record_date': date.date(),
        'record_time': callback_query.data,
        'fio': first_name + " " + second_name,
        'user_id': callback_query.from_user.id
    }
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞ –≤ –ë–î.
    stmt = insert(Timesheet).values(data)
    session.execute(stmt)
    session.commit()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    await state.finish()
