import smtplib
import os
import datetime
import asyncio

from datetime import timedelta
from celery import Celery
from email.message import EmailMessage
from dotenv import load_dotenv
from sqlalchemy import select
from celery.schedules import crontab
from aiogram.types import Message


from teach_bot.database.databases import session
from teach_bot.database.tables import Timesheet
from ..loader import (bot,
                      dp)

load_dotenv()

SMTP_HOST = os.getenv("SMTP_HOST")
SMTP_PORT = os.getenv("SMTP_PORT")
SMTP_USER = os.getenv("SENDER")
SMTP_PASSWORD = os.getenv("EMAIL_PASSWORD")

app = Celery('tasks', broker="redis://localhost:6379")


def get_data_from_tables():
    """–í—ã–±–æ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —É—á–∏—Ç–µ–ª—è."""
    now = datetime.datetime.now().date() + timedelta(days=1)
    stmt = select(Timesheet.fio,
                  Timesheet.record_date,
                  Timesheet.record_time).\
        where(Timesheet.record_date == now)
    result = session.execute(stmt)
    return result.fetchall()


def get_email_text(data):
    """–¢—É—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    email = EmailMessage()
    email["Subject"] = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."
    email["From"] = SMTP_USER
    email["To"] = SMTP_USER

    email.set_content(
       "–í–æ—Ç —Ç–≤–æ–∏ —É—Ä–æ–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: \n\n" + "\n".join([f"{row.fio} "
                                                     f"{row.record_date} "
                                                     f"{row.record_time} "
                                                     for row in data])
    )
    return email


@app.task
def send_email_report():
    """
    –°–∞–º–∞ —Ç–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É
    –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.
    """
    sender = SMTP_USER
    password = SMTP_PASSWORD
    data = get_data_from_tables()

    server = smtplib.SMTP(SMTP_HOST, int(SMTP_PORT))
    try:
        server.starttls()
        server.login(sender, password)
        email = get_email_text(data)
        server.sendmail(sender, sender, email.as_string())
        return '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
    except smtplib.SMTPException as ex:
        print(f"{ex} –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!")


async def send_reminder(user_chat_id):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º —É—á–∞—â–∏–º—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞–ª–∏
    –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞.
    """
    await bot.send_message(chat_id=user_chat_id,
                           text="–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏ –≤—Å–µ–º! –ù–µ –∑–∞–±—ã–≤–∞–µ–º "
                                "–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –í–∞—Å –Ω–µ "
                                "–æ–ø–µ—Ä–µ–¥–∏–ª–∏ üòâüòâüòâ")

@app.task
def send_weekly_reminder():
    """
    –í—ã–±–æ—Ä–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—Å–µ—Ö id —á–∞—Ç–æ–≤ —É—á–∞—â–∏—Ö—Å—è, —É–¥–∞–ª—è–µ–º –¥—É–±–ª—è–∂–∏ (—á—Ç–æ–±—ã –Ω–µ
    –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ —É—á–µ–Ω–∏–∫—É –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π), –∏ –≤—ã–∑—ã–≤–∞–µ–º
    —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    stmt = session.query(Timesheet.chat_id)
    users = session.execute(stmt).fetchall()
    for user in set(users):
        print(user)
        user_chat_id = user[0]
        asyncio.run(send_reminder(user_chat_id))


# –ó–∞–ø—É—Å–∫ —Ç–∞—Å–∫
app.conf.beat_schedule = {
    "run-task-every-day": {
        "task": "teach_bot.utils.tasks.send_email_report",
        "schedule": crontab(hour=20, minute=0)
    },
    "run-task-every-monday": {
        "task": "teach_bot.utils.tasks.send_weekly_reminder",
        "schedule": crontab(day_of_week="mon", hour=12, minute=0)
    }
}
app.conf.timezone = "Europe/Moscow"